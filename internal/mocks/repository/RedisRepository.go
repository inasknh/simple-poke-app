// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/inasknh/simple-poke-app/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RedisRepository is an autogenerated mock type for the RedisRepository type
type RedisRepository struct {
	mock.Mock
}

// GetData provides a mock function with given fields: ctx
func (_m *RedisRepository) GetData(ctx context.Context) (*model.BerriesResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 *model.BerriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.BerriesResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.BerriesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BerriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetData provides a mock function with given fields: ctx, response
func (_m *RedisRepository) SetData(ctx context.Context, response *model.BerriesResponse) error {
	ret := _m.Called(ctx, response)

	if len(ret) == 0 {
		panic("no return value specified for SetData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.BerriesResponse) error); ok {
		r0 = rf(ctx, response)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisRepository creates a new instance of RedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisRepository {
	mock := &RedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
